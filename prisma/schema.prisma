// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql" // Adjust based on your database
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(uuid())
  email        String   @unique
  password     String   // Hash this in your app
  firstName    String
  lastName     String
  verifiedEmail Boolean  @default(false)
  otpCode      String?
  otpExpiry    DateTime?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  accounts     Account[]     // NextAuth relation
  sessions     Session[]     // NextAuth relation      
  chatHistories ChatHistory[]               
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model ChatHistory {
  id          String         @id @default(uuid())
  name        String
  userId      String
  user        User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  threaded    Boolean        @default(false)
  threadId    String?
  files       UploadedFile[]
  messages    ChatMessage[]
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
}

model ChatMessage {
  id          String    @id @default(uuid())
  chatId      String
  chat        ChatHistory @relation(fields: [chatId], references: [id], onDelete: Cascade)
  message     String
  msgBy       MessageBy
  createdAt   DateTime  @default(now())
}

model UploadedFile {
  id          String    @id @default(uuid())
  chatId      String
  chat        ChatHistory @relation(fields: [chatId], references: [id], onDelete: Cascade)
  name        String
  type        String
  content     String
  url         String?  // Optional
  selected    Boolean  @default(false)
  createdAt   DateTime @default(now())
}

enum MessageBy {
  USER
  SYSTEM
}